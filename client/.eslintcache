[{"C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\index.js":"1","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\App.js":"2","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\components\\NavBar.js":"4","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\Home.jsx":"5","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\Signup.jsx":"6","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\Profile.jsx":"7","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\index.js":"8","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\Signin.jsx":"9","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\UploadPost.jsx":"10","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\services\\authService.js":"11","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\services\\postService.js":"12","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\context\\AuthContext.js":"13","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\UserProfile.jsx":"14","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\services\\userService.js":"15","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\SubscribePost.jsx":"16"},{"size":455,"mtime":1609064757537,"results":"17","hashOfConfig":"18"},{"size":1210,"mtime":1609064757522,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1607682113022,"results":"20","hashOfConfig":"18"},{"size":2355,"mtime":1609080622684,"results":"21","hashOfConfig":"18"},{"size":4678,"mtime":1609081698046,"results":"22","hashOfConfig":"18"},{"size":3032,"mtime":1609082987792,"results":"23","hashOfConfig":"18"},{"size":2850,"mtime":1609082833604,"results":"24","hashOfConfig":"18"},{"size":375,"mtime":1609064757559,"results":"25","hashOfConfig":"18"},{"size":2214,"mtime":1609082753996,"results":"26","hashOfConfig":"18"},{"size":2026,"mtime":1609064757554,"results":"27","hashOfConfig":"18"},{"size":1725,"mtime":1609064757565,"results":"28","hashOfConfig":"18"},{"size":2896,"mtime":1609064757567,"results":"29","hashOfConfig":"18"},{"size":1040,"mtime":1609064757534,"results":"30","hashOfConfig":"18"},{"size":3342,"mtime":1609064757556,"results":"31","hashOfConfig":"18"},{"size":1359,"mtime":1609064757569,"results":"32","hashOfConfig":"18"},{"size":4704,"mtime":1609064757552,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"bgknoz",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\index.js",[],["74","75"],"C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\App.js",["76"],"import React, {useContext, useEffect} from 'react';\r\nimport NavBar from \"./components/NavBar\";\r\nimport {BrowserRouter as Router, Route, Switch, useHistory} from \"react-router-dom\";\r\nimport {Home, Profile, Signin, Signup, SubscribePost, UploadPost, UserProfile} from './screens';\r\nimport {AuthContext} from \"./context/AuthContext\";\r\n\r\nconst Routing = () => {\r\n    const {isAuthenticated} = useContext(AuthContext);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (!isAuthenticated)\r\n            history.push('/signin');\r\n    }, []);\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={Home}/>\r\n            <Route exact path=\"/profile\" component={Profile}/>\r\n            <Route path=\"/signin\" component={Signin}/>\r\n            <Route path=\"/signup\" component={Signup}/>\r\n            <Route path=\"/profile/:userId\" component={UserProfile}/>\r\n            <Route path=\"/upload_post\" component={UploadPost}/>\r\n            <Route path=\"/subscribed_posts\" component={SubscribePost}/>\r\n        </Switch>\r\n    );\r\n};\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <NavBar/>\r\n            <Routing/>\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\reportWebVitals.js",[],["77","78"],"C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\components\\NavBar.js",[],"C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\Home.jsx",[],"C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\Signup.jsx",["79"],"C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\Profile.jsx",[],"C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\index.js",[],"C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\Signin.jsx",[],"C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\UploadPost.jsx",[],"C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\services\\authService.js",["80"],"export default {\r\n    uploadImage: async image => {\r\n        const photoData = new FormData();\r\n        photoData.append('file', image);\r\n        photoData.append('upload_preset', 'Insta-Clone');\r\n        photoData.append('cloud_name', 'junaidsikander');\r\n        return await fetch('https://api.cloudinary.com/v1_1/junaidsikander/image/upload', {\r\n            method: 'POST',\r\n            body: photoData\r\n        }).then(res => res.json())\r\n            .then(data => data.url)\r\n            .catch(err => console.log(err))\r\n    },\r\n    signUp: async user => {\r\n        return await fetch('/signup', {\r\n            method: 'POST',\r\n            body: JSON.stringify(user),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err))\r\n    },\r\n    signIn: async user => {\r\n        return await fetch('/signin', {\r\n            method: 'POST',\r\n            body: JSON.stringify(user),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => data)\r\n    },\r\n    isAuthenticated: async () => {\r\n        return await fetch('/authenticated')\r\n            .then(res => {\r\n                if (res.status !== 401)\r\n                    return res.json().then(data => data);\r\n                else\r\n                    return {isAuthenticated: false, user: {name: \"\", email: \"\"}};\r\n            })\r\n    },\r\n    logout: async () => {\r\n        return await fetch('/logout')\r\n            .then(res =>res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err))\r\n    }\r\n};\r\n","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\services\\postService.js",["81"],"export default {\r\n    uploadImage: async image => {\r\n        const photoData = new FormData();\r\n        photoData.append('file', image);\r\n        photoData.append('upload_preset', 'Insta-Clone');\r\n        photoData.append('cloud_name', 'junaidsikander');\r\n        return await fetch('https://api.cloudinary.com/v1_1/junaidsikander/image/upload', {\r\n            method: 'POST',\r\n            body: photoData\r\n        }).then(res => res.json())\r\n            .then(data => data.url)\r\n            .catch(err => console.log(err))\r\n    },\r\n    uploadPost: async post => {\r\n        return await fetch('/posts/create_post', {\r\n            method: 'POST',\r\n            body: JSON.stringify(post),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err))\r\n    },\r\n    getAllPost: async () => {\r\n        return await fetch('/posts/get_all_posts')\r\n            .then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err))\r\n    },\r\n    myPost: async () => {\r\n        return await fetch('/posts/my_posts')\r\n            .then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err))\r\n    },\r\n    likePost: async id => {\r\n        return await fetch('/posts/like', {\r\n            method: 'PUT',\r\n            body: JSON.stringify({postId: id}),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err));\r\n    },\r\n    unlikePost: async id => {\r\n        return await fetch('/posts/unlike', {\r\n            method: 'PUT',\r\n            body: JSON.stringify({postId: id}),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err));\r\n    },\r\n    comment: async (text, postId) => {\r\n        return await fetch('/posts/comment', {\r\n            method: 'PUT',\r\n            body: JSON.stringify({text, postId}),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err))\r\n    },\r\n    deletePost: async (postId) => {\r\n        return await fetch(`/posts/delete_post/${postId}`, {\r\n            method: 'DELETE'\r\n        }).then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err))\r\n    },\r\n    getSubscribedPosts: async () => {\r\n        return await fetch('/posts/get_subscribed_posts')\r\n            .then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err))\r\n    }\r\n};\r\n","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\context\\AuthContext.js",["82"],"import React, {createContext, useEffect, useState} from 'react';\r\nimport authService from \"../services/authService\";\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport default ({children}) => {\r\n    const [user, setUser] = useState(null);\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    useEffect(() => {\r\n        authService.isAuthenticated()\r\n            .then(data => {\r\n                setUser(data.user);\r\n                setIsAuthenticated(data.isAuthenticated);\r\n                setIsLoaded(true);\r\n            })\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {!isLoaded ?\r\n                <div className=\"progress\">\r\n                    <div className=\"indeterminate\"></div>\r\n                </div>\r\n                :\r\n                <AuthContext.Provider value={{user, setUser, isAuthenticated, setIsAuthenticated}}>\r\n                    {children}\r\n                </AuthContext.Provider>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\UserProfile.jsx",["83"],"import React, {useContext, useEffect, useState} from 'react';\r\nimport {AuthContext} from \"../context/AuthContext\";\r\nimport {useParams} from 'react-router-dom'\r\nimport userService from \"../services/userService\";\r\n\r\nconst UserProfile = () => {\r\n    const [userProfile, setProfile] = useState(null);\r\n    const {user, setUser} = useContext(AuthContext);\r\n    const {userId} = useParams();\r\n    const [toggleButton, setToggleButton] = useState(!user?.following.includes(userId));\r\n\r\n    useEffect(() => {\r\n        userService.getUserProfile(userId)\r\n            .then(profile => {\r\n                setProfile(profile)\r\n            })\r\n    }, [user]);\r\n\r\n    const onFollowClick = () => {\r\n        userService.followUser(userId)\r\n            .then(result => {\r\n                setUser({...user, followers: result.followers, following: result.following})\r\n            });\r\n        setToggleButton(false);\r\n    };\r\n\r\n    const onUnFollowClick = () => {\r\n        userService.unfollowUser(userId)\r\n            .then(result => {\r\n                const newFollower = userProfile.user.followers.filter(list => list !== result._id);\r\n                setUser({...user, followers: newFollower});\r\n            });\r\n        setToggleButton(true);\r\n    };\r\n\r\n    return (\r\n        userProfile ?\r\n            <>\r\n                <div className=\"profile-container\">\r\n                    <div className='profile-subcontainer'>\r\n                        <div>\r\n                            <img className=\"image-container\"\r\n                                 alt=\"\"\r\n                                 src={userProfile.user?.pic}\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <h4>{userProfile.user.name}</h4>\r\n                            <h5>{userProfile.user.email}</h5>\r\n                            <div className=\"info-container\">\r\n                                <h6> {userProfile.posts.length} posts</h6>\r\n                                <h6> {userProfile.user.followers.length} followers</h6>\r\n                                <h6> {userProfile.user.following.length} following</h6>\r\n                            </div>\r\n                            {toggleButton ?\r\n                                <button className=\"btn waves-effect waves-light #64b5f6 blue lighten-2 button-margin\"\r\n                                        onClick={onFollowClick}>\r\n                                    Follow\r\n                                </button>\r\n                                :\r\n                                <button className=\"btn waves-effect waves-light #64b5f6 blue lighten-2 button-margin\"\r\n                                        onClick={onUnFollowClick}>\r\n                                    Unfollow\r\n                                </button>\r\n                            }\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"gallery\">\r\n                        {\r\n                            userProfile.posts.map(post => (\r\n                                <img key={post._id} className=\"item\" alt={post.title} src={post.photo}/>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </>\r\n            : <h2>Loading...</h2>\r\n    )\r\n};\r\n\r\nexport default UserProfile;\r\n","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\services\\userService.js",["84"],"export default {\r\n    getUserProfile: async userId => {\r\n        return await fetch(`/user/${userId}`)\r\n            .then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err))\r\n    },\r\n    followUser: async userId => {\r\n        return await fetch('/user/follow', {\r\n            method: 'PUT',\r\n            body: JSON.stringify({followId: userId}),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err))\r\n    },\r\n    unfollowUser: async userId => {\r\n        return await fetch('/user/unfollow', {\r\n            method: 'PUT',\r\n            body: JSON.stringify({unfollowId: userId}),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err))\r\n    },\r\n    updatePicture: async pic => {\r\n        return await fetch('/user/update_pic', {\r\n            method: 'PUT',\r\n            body: JSON.stringify({pic}),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => data)\r\n            .catch(err => console.log(err))\r\n    }\r\n};\r\n","C:\\Users\\Junii\\Documents\\Workspace\\Insta-clone\\client\\src\\screens\\SubscribePost.jsx",[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":14,"column":8,"nodeType":"91","endLine":14,"endColumn":10,"suggestions":"92"},{"ruleId":"85","replacedBy":"93"},{"ruleId":"87","replacedBy":"94"},{"ruleId":"89","severity":1,"message":"95","line":13,"column":8,"nodeType":"91","endLine":13,"endColumn":18,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":1,"column":1,"nodeType":"99","endLine":50,"endColumn":3},{"ruleId":"97","severity":1,"message":"98","line":1,"column":1,"nodeType":"99","endLine":83,"endColumn":3},{"ruleId":"97","severity":1,"message":"100","line":6,"column":1,"nodeType":"99","endLine":33,"endColumn":2},{"ruleId":"89","severity":1,"message":"101","line":17,"column":8,"nodeType":"91","endLine":17,"endColumn":14,"suggestions":"102"},{"ruleId":"97","severity":1,"message":"98","line":1,"column":1,"nodeType":"99","endLine":41,"endColumn":3},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'isAuthenticated'. Either include them or remove the dependency array.","ArrayExpression",["105"],["103"],["104"],"React Hook useEffect has a missing dependency: 'onSignUp'. Either include it or remove the dependency array.",["106"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign arrow function to a variable before exporting as module default","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["107"],"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},"Update the dependencies array to be: [history, isAuthenticated]",{"range":"114","text":"115"},"Update the dependencies array to be: [onSignUp, user.pic]",{"range":"116","text":"117"},"Update the dependencies array to be: [user, userId]",{"range":"118","text":"119"},[551,553],"[history, isAuthenticated]",[435,445],"[onSignUp, user.pic]",[638,644],"[user, userId]"]